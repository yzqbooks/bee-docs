"use strict";(self.webpackChunkbee=self.webpackChunkbee||[]).push([[7003],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return g}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=u(t),g=l,c=d["".concat(o,".").concat(g)]||d[g]||p[g]||a;return t?r.createElement(c,s(s({ref:n},m),{},{components:t})):r.createElement(c,s({ref:n},m))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,s[1]=i;for(var u=2;u<a;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1005:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=t(7462),l=t(3366),a=(t(7294),t(3905)),s=["components"],i={name:"\u9ad8\u7ea7\u67e5\u8be2",sort:4},o="\u9ad8\u7ea7\u67e5\u8be2",u={unversionedId:"mvc/model/query",id:"mvc/model/query",title:"\u9ad8\u7ea7\u67e5\u8be2",description:"ORM \u4ee5 QuerySeter \u6765\u7ec4\u7ec7\u67e5\u8be2\uff0c\u6bcf\u4e2a\u8fd4\u56de QuerySeter \u7684\u65b9\u6cd5\u90fd\u4f1a\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684 QuerySeter \u5bf9\u8c61\u3002",source:"@site/docs/mvc/model/query.md",sourceDirName:"mvc/model",slug:"/mvc/model/query",permalink:"/bee-docs/docs/mvc/model/query",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mvc/model/query.md",tags:[],version:"current",frontMatter:{name:"\u9ad8\u7ea7\u67e5\u8be2",sort:4},sidebar:"tutorialSidebar",previous:{title:"\u6a21\u578b\uff08Models\uff09\uff0d beego ORM",permalink:"/bee-docs/docs/mvc/model/overview"},next:{title:"\u6784\u9020\u67e5\u8be2",permalink:"/bee-docs/docs/mvc/model/querybuilder"}},m={},p=[{value:"expr",id:"expr",level:2},{value:"Operators",id:"operators",level:2},{value:"exact",id:"exact",level:3},{value:"iexact",id:"iexact",level:3},{value:"contains",id:"contains",level:3},{value:"icontains",id:"icontains",level:3},{value:"in",id:"in",level:3},{value:"gt / gte",id:"gt--gte",level:3},{value:"lt / lte",id:"lt--lte",level:3},{value:"startswith",id:"startswith",level:3},{value:"istartswith",id:"istartswith",level:3},{value:"endswith",id:"endswith",level:3},{value:"iendswith",id:"iendswith",level:3},{value:"isnull",id:"isnull",level:3},{value:"\u9ad8\u7ea7\u67e5\u8be2\u63a5\u53e3\u4f7f\u7528",id:"\u9ad8\u7ea7\u67e5\u8be2\u63a5\u53e3\u4f7f\u7528",level:2},{value:"Filter",id:"filter",level:3},{value:"Exclude",id:"exclude",level:3},{value:"SetCond",id:"setcond",level:3},{value:"Limit",id:"limit",level:3},{value:"Offset",id:"offset",level:3},{value:"GroupBy",id:"groupby",level:3},{value:"OrderBy",id:"orderby",level:3},{value:"ForceIndex",id:"forceindex",level:3},{value:"UseIndex",id:"useindex",level:3},{value:"IgnoreIndex",id:"ignoreindex",level:3},{value:"Distinct",id:"distinct",level:3},{value:"RelatedSel",id:"relatedsel",level:3},{value:"Count",id:"count",level:3},{value:"Exist",id:"exist",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"PrepareInsert",id:"prepareinsert",level:3},{value:"All",id:"all",level:3},{value:"One",id:"one",level:3},{value:"Values",id:"values",level:3},{value:"ValuesList",id:"valueslist",level:3},{value:"ValuesFlat",id:"valuesflat",level:3},{value:"\u5173\u7cfb\u67e5\u8be2",id:"\u5173\u7cfb\u67e5\u8be2",level:2},{value:"User \u548c Profile \u662f OneToOne \u7684\u5173\u7cfb",id:"user-\u548c-profile-\u662f-onetoone-\u7684\u5173\u7cfb",level:4},{value:"Post \u548c User \u662f ManyToOne \u5173\u7cfb\uff0c\u4e5f\u5c31\u662f ForeignKey \u4e3a User",id:"post-\u548c-user-\u662f-manytoone-\u5173\u7cfb\u4e5f\u5c31\u662f-foreignkey-\u4e3a-user",level:4},{value:"Post \u548c Tag \u662f ManyToMany \u5173\u7cfb",id:"post-\u548c-tag-\u662f-manytomany-\u5173\u7cfb",level:4},{value:"\u8f7d\u5165\u5173\u7cfb\u5b57\u6bb5",id:"\u8f7d\u5165\u5173\u7cfb\u5b57\u6bb5",level:2},{value:"\u591a\u5bf9\u591a\u5173\u7cfb\u64cd\u4f5c",id:"\u591a\u5bf9\u591a\u5173\u7cfb\u64cd\u4f5c",level:2},{value:"QueryM2Mer Add",id:"querym2mer-add",level:3},{value:"QueryM2Mer Remove",id:"querym2mer-remove",level:3},{value:"QueryM2Mer Exist",id:"querym2mer-exist",level:3},{value:"QueryM2Mer Clear",id:"querym2mer-clear",level:3},{value:"QueryM2Mer Count",id:"querym2mer-count",level:3}],d={toc:p};function g(e){var n=e.components,t=(0,l.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u9ad8\u7ea7\u67e5\u8be2"},"\u9ad8\u7ea7\u67e5\u8be2"),(0,a.kt)("p",null,"ORM \u4ee5 ",(0,a.kt)("strong",{parentName:"p"},"QuerySeter")," \u6765\u7ec4\u7ec7\u67e5\u8be2\uff0c\u6bcf\u4e2a\u8fd4\u56de ",(0,a.kt)("strong",{parentName:"p"},"QuerySeter")," \u7684\u65b9\u6cd5\u90fd\u4f1a\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684 ",(0,a.kt)("strong",{parentName:"p"},"QuerySeter")," \u5bf9\u8c61\u3002"),(0,a.kt)("p",null,"\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'o := orm.NewOrm()\n\n// \u83b7\u53d6 QuerySeter \u5bf9\u8c61\uff0cuser \u4e3a\u8868\u540d\nqs := o.QueryTable("user")\n\n// \u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Model \u7ed3\u6784\u4f53\u4f5c\u4e3a\u8868\u540d\nqs = o.QueryTable(&User)\n\n// \u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5bf9\u8c61\u4f5c\u4e3a\u8868\u540d\nuser := new(User)\nqs = o.QueryTable(user) // \u8fd4\u56de QuerySeter\n')),(0,a.kt)("h2",{id:"expr"},"expr"),(0,a.kt)("p",null,"QuerySeter \u4e2d\u7528\u4e8e\u63cf\u8ff0\u5b57\u6bb5\u548c sql \u64cd\u4f5c\u7b26\uff0c\u4f7f\u7528\u7b80\u5355\u7684 expr \u67e5\u8be2\u65b9\u6cd5"),(0,a.kt)("p",null,"\u5b57\u6bb5\u7ec4\u5408\u7684\u524d\u540e\u987a\u5e8f\u4f9d\u7167\u8868\u7684\u5173\u7cfb\uff0c\u6bd4\u5982 User \u8868\u62e5\u6709 Profile \u7684\u5916\u952e\uff0c\u90a3\u4e48\u5bf9 User \u8868\u67e5\u8be2\u5bf9\u5e94\u7684 Profile.Age \u4e3a\u6761\u4ef6\uff0c\u5219\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"Profile__Age")," \u6ce8\u610f\uff0c\u5b57\u6bb5\u7684\u5206\u9694\u7b26\u53f7\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf ",(0,a.kt)("inlineCode",{parentName:"p"},"__"),"\uff0c\u9664\u4e86\u63cf\u8ff0\u5b57\u6bb5\uff0c expr \u7684\u5c3e\u90e8\u53ef\u4ee5\u589e\u52a0\u64cd\u4f5c\u7b26\u4ee5\u6267\u884c\u5bf9\u5e94\u7684 sql \u64cd\u4f5c\u3002\u6bd4\u5982 ",(0,a.kt)("inlineCode",{parentName:"p"},"Profile__Age__gt")," \u4ee3\u8868 Profile.Age > 18 \u7684\u6761\u4ef6\u67e5\u8be2\u3002"),(0,a.kt)("p",null,"\u6ce8\u91ca\u540e\u9762\u5c06\u63cf\u8ff0\u5bf9\u5e94\u7684 sql \u8bed\u53e5\uff0c\u4ec5\u4ec5\u662f\u63cf\u8ff0 expr \u7684\u7c7b\u4f3c\u7ed3\u679c\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u751f\u6210\u7684\u8bed\u53e5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Filter("id", 1) // WHERE id = 1\nqs.Filter("profile__age", 18) // WHERE profile.age = 18\nqs.Filter("Profile__Age", 18) // \u4f7f\u7528\u5b57\u6bb5\u540d\u548c Field \u540d\u90fd\u662f\u5141\u8bb8\u7684\nqs.Filter("profile__age__gt", 18) // WHERE profile.age > 18\nqs.Filter("profile__age__gte", 18) // WHERE profile.age >= 18\nqs.Filter("profile__age__in", 18, 20) // WHERE profile.age IN (18, 20)\n\nqs.Filter("profile__age__in", 18, 20).Exclude("profile__lt", 1000)\n// WHERE profile.age IN (18, 20) AND NOT profile_id < 1000\n')),(0,a.kt)("h2",{id:"operators"},"Operators"),(0,a.kt)("p",null,"\u5f53\u524d\u652f\u6301\u7684\u64cd\u4f5c\u7b26\u53f7\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#exact"},"exact")," / ",(0,a.kt)("a",{parentName:"li",href:"#iexact"},"iexact")," \u7b49\u4e8e"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#contains"},"contains")," / ",(0,a.kt)("a",{parentName:"li",href:"#icontains"},"icontains")," \u5305\u542b"),(0,a.kt)("li",{parentName:"ul"},"[gt / gte]","(#gt / gte) \u5927\u4e8e / \u5927\u4e8e\u7b49\u4e8e"),(0,a.kt)("li",{parentName:"ul"},"[lt / lte]","(#lt / lte) \u5c0f\u4e8e / \u5c0f\u4e8e\u7b49\u4e8e"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#startswith"},"startswith")," / ",(0,a.kt)("a",{parentName:"li",href:"#istartswith"},"istartswith")," \u4ee5...\u8d77\u59cb"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#endswith"},"endswith")," / ",(0,a.kt)("a",{parentName:"li",href:"#iendswith"},"iendswith")," \u4ee5...\u7ed3\u675f"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#in"},"in")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#isnull"},"isnull"))),(0,a.kt)("p",null,"\u540e\u9762\u4ee5 ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," \u5f00\u5934\u7684\u8868\u793a\uff1a\u5927\u5c0f\u5199\u4e0d\u654f\u611f"),(0,a.kt)("h3",{id:"exact"},"exact"),(0,a.kt)("p",null,"Filter / Exclude / Condition expr \u7684\u9ed8\u8ba4\u503c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Filter("name", "slene") // WHERE name = \'slene\'\nqs.Filter("name__exact", "slene") // WHERE name = \'slene\'\n// \u4f7f\u7528 = \u5339\u914d\uff0c\u5927\u5c0f\u5199\u662f\u5426\u654f\u611f\u53d6\u51b3\u4e8e\u6570\u636e\u8868\u4f7f\u7528\u7684 collation\nqs.Filter("profile_id", nil) // WHERE profile_id IS NULL\n')),(0,a.kt)("h3",{id:"iexact"},"iexact"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.Filter(\"name__iexact\", \"slene\")\n// WHERE name LIKE 'slene'\n// \u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u5339\u914d\u4efb\u610f 'Slene' 'sLENE'\n")),(0,a.kt)("h3",{id:"contains"},"contains"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Filter("name__contains", "slene")\n// WHERE name LIKE BINARY \'%slene%\'\n// \u5927\u5c0f\u5199\u654f\u611f, \u5339\u914d\u5305\u542b slene \u7684\u5b57\u7b26\n')),(0,a.kt)("h3",{id:"icontains"},"icontains"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.Filter(\"name__icontains\", \"slene\")\n// WHERE name LIKE '%slene%'\n// \u5927\u5c0f\u5199\u4e0d\u654f\u611f, \u5339\u914d\u4efb\u610f 'im Slene', 'im sLENE'\n")),(0,a.kt)("h3",{id:"in"},"in"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Filter("age__in", 17, 18, 19, 20)\n// WHERE age IN (17, 18, 19, 20)\n\n\nids:=[]int{17,18,19,20}\nqs.Filter("age__in", ids)\n// WHERE age IN (17, 18, 19, 20)\n\n// \u540c\u4e0a\u6548\u679c\n')),(0,a.kt)("h3",{id:"gt--gte"},"gt / gte"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Filter("profile__age__gt", 17)\n// WHERE profile.age > 17\n\nqs.Filter("profile__age__gte", 18)\n// WHERE profile.age >= 18\n')),(0,a.kt)("h3",{id:"lt--lte"},"lt / lte"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Filter("profile__age__lt", 17)\n// WHERE profile.age < 17\n\nqs.Filter("profile__age__lte", 18)\n// WHERE profile.age <= 18\n')),(0,a.kt)("h3",{id:"startswith"},"startswith"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.Filter(\"name__startswith\", \"slene\")\n// WHERE name LIKE BINARY 'slene%'\n// \u5927\u5c0f\u5199\u654f\u611f, \u5339\u914d\u4ee5 'slene' \u8d77\u59cb\u7684\u5b57\u7b26\u4e32\n")),(0,a.kt)("h3",{id:"istartswith"},"istartswith"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.Filter(\"name__istartswith\", \"slene\")\n// WHERE name LIKE 'slene%'\n// \u5927\u5c0f\u5199\u4e0d\u654f\u611f, \u5339\u914d\u4efb\u610f\u4ee5 'slene', 'Slene' \u8d77\u59cb\u7684\u5b57\u7b26\u4e32\n")),(0,a.kt)("h3",{id:"endswith"},"endswith"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.Filter(\"name__endswith\", \"slene\")\n// WHERE name LIKE BINARY '%slene'\n// \u5927\u5c0f\u5199\u654f\u611f, \u5339\u914d\u4ee5 'slene' \u7ed3\u675f\u7684\u5b57\u7b26\u4e32\n")),(0,a.kt)("h3",{id:"iendswith"},"iendswith"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.Filter(\"name__iendswithi\", \"slene\")\n// WHERE name LIKE '%slene'\n// \u5927\u5c0f\u5199\u4e0d\u654f\u611f, \u5339\u914d\u4efb\u610f\u4ee5 'slene', 'Slene' \u7ed3\u675f\u7684\u5b57\u7b26\u4e32\n")),(0,a.kt)("h3",{id:"isnull"},"isnull"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Filter("profile__isnull", true)\nqs.Filter("profile_id__isnull", true)\n// WHERE profile_id IS NULL\n\nqs.Filter("profile__isnull", false)\n// WHERE profile_id IS NOT NULL\n')),(0,a.kt)("h2",{id:"\u9ad8\u7ea7\u67e5\u8be2\u63a5\u53e3\u4f7f\u7528"},"\u9ad8\u7ea7\u67e5\u8be2\u63a5\u53e3\u4f7f\u7528"),(0,a.kt)("p",null,"QuerySeter \u662f\u9ad8\u7ea7\u67e5\u8be2\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u6211\u4eec\u6765\u719f\u6089\u4e0b\u4ed6\u7684\u63a5\u53e3\u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type QuerySeter interface {\n// add condition expression to QuerySeter.\n// for example:\n//  filter by UserName == \'slene\'\n//  qs.Filter("UserName", "slene")\n//  sql : left outer join profile on t0.id1==t1.id2 where t1.age == 28\n//  Filter("profile__Age", 28)\n//   // time compare\n//  qs.Filter("created", time.Now())\nFilter(string, ...interface{}) QuerySeter\n// add raw sql to querySeter.\n// for example:\n// qs.FilterRaw("user_id IN (SELECT id FROM profile WHERE age>=18)")\n// //sql-> WHERE user_id IN (SELECT id FROM profile WHERE age>=18)\nFilterRaw(string, string) QuerySeter\n// add NOT condition to querySeter.\n// have the same usage as Filter\nExclude(string, ...interface{}) QuerySeter\n// set condition to QuerySeter.\n// sql\'s where condition\n//  cond := orm.NewCondition()\n//  cond1 := cond.And("profile__isnull", false).AndNot("status__in", 1).Or("profile__age__gt", 2000)\n//  //sql-> WHERE T0.`profile_id` IS NOT NULL AND NOT T0.`Status` IN (?) OR T1.`age` >  2000\n//  num, err := qs.SetCond(cond1).Count()\nSetCond(*Condition) QuerySeter\n// get condition from QuerySeter.\n// sql\'s where condition\n//  cond := orm.NewCondition()\n//  cond = cond.And("profile__isnull", false).AndNot("status__in", 1)\n//  qs = qs.SetCond(cond)\n//  cond = qs.GetCond()\n//  cond := cond.Or("profile__age__gt", 2000)\n//  //sql-> WHERE T0.`profile_id` IS NOT NULL AND NOT T0.`Status` IN (?) OR T1.`age` >  2000\n//  num, err := qs.SetCond(cond).Count()\nGetCond() *Condition\n// add LIMIT value.\n// args[0] means offset, e.g. LIMIT num,offset.\n// if Limit <= 0 then Limit will be set to default limit ,eg 1000\n// if QuerySeter doesn\'t call Limit, the sql\'s Limit will be set to default limit, eg 1000\n//  for example:\n//  qs.Limit(10, 2)\n//  // sql-> limit 10 offset 2\nLimit(limit interface{}, args ...interface{}) QuerySeter\n// add OFFSET value\n// same as Limit function\'s args[0]\nOffset(offset interface{}) QuerySeter\n// add GROUP BY expression\n// for example:\n//  qs.GroupBy("id")\nGroupBy(exprs ...string) QuerySeter\n// add ORDER expression.\n// "column" means ASC, "-column" means DESC.\n// for example:\n//  qs.OrderBy("-status")\nOrderBy(exprs ...string) QuerySeter\n// add FORCE INDEX expression.\n// for example:\n//  qs.ForceIndex(`idx_name1`,`idx_name2`)\n// ForceIndex, UseIndex , IgnoreIndex are mutually exclusive\nForceIndex(indexes ...string) QuerySeter\n// add USE INDEX expression.\n// for example:\n//  qs.UseIndex(`idx_name1`,`idx_name2`)\n// ForceIndex, UseIndex , IgnoreIndex are mutually exclusive\nUseIndex(indexes ...string) QuerySeter\n// add IGNORE INDEX expression.\n// for example:\n//  qs.IgnoreIndex(`idx_name1`,`idx_name2`)\n// ForceIndex, UseIndex , IgnoreIndex are mutually exclusive\nIgnoreIndex(indexes ...string) QuerySeter\n// set relation model to query together.\n// it will query relation models and assign to parent model.\n// for example:\n//  // will load all related fields use left join .\n//  qs.RelatedSel().One(&user)\n//  // will  load related field only profile\n//  qs.RelatedSel("profile").One(&user)\n//  user.Profile.Age = 32\nRelatedSel(params ...interface{}) QuerySeter\n// Set Distinct\n// for example:\n//  o.QueryTable("policy").Filter("Groups__Group__Users__User", user).\n//    Distinct().\n//    All(&permissions)\nDistinct() QuerySeter\n// set FOR UPDATE to query.\n// for example:\n//  o.QueryTable("user").Filter("uid", uid).ForUpdate().All(&users)\nForUpdate() QuerySeter\n// return QuerySeter execution result number\n// for example:\n//  num, err = qs.Filter("profile__age__gt", 28).Count()\nCount() (int64, error)\n// check result empty or not after QuerySeter executed\n// the same as QuerySeter.Count > 0\nExist() bool\n// execute update with parameters\n// for example:\n//  num, err = qs.Filter("user_name", "slene").Update(Params{\n//      "Nums": ColValue(Col_Minus, 50),\n//  }) // user slene\'s Nums will minus 50\n//  num, err = qs.Filter("UserName", "slene").Update(Params{\n//      "user_name": "slene2"\n//  }) // user slene\'s  name will change to slene2\nUpdate(values Params) (int64, error)\n// delete from table\n// for example:\n//  num ,err = qs.Filter("user_name__in", "testing1", "testing2").Delete()\n//  //delete two user  who\'s name is testing1 or testing2\nDelete() (int64, error)\n// return a insert queryer.\n// it can be used in times.\n// example:\n//  i,err := sq.PrepareInsert()\n//  num, err = i.Insert(&user1) // user table will add one record user1 at once\n//  num, err = i.Insert(&user2) // user table will add one record user2 at once\n//  err = i.Close() //don\'t forget call Close\nPrepareInsert() (Inserter, error)\n// query all data and map to containers.\n// cols means the columns when querying.\n// for example:\n//  var users []*User\n//  qs.All(&users) // users[0],users[1],users[2] ...\nAll(container interface{}, cols ...string) (int64, error)\n// query one row data and map to containers.\n// cols means the columns when querying.\n// for example:\n//  var user User\n//  qs.One(&user) //user.UserName == "slene"\nOne(container interface{}, cols ...string) error\n// query all data and map to []map[string]interface.\n// expres means condition expression.\n// it converts data to []map[column]value.\n// for example:\n//  var maps []Params\n//  qs.Values(&maps) //maps[0]["UserName"]=="slene"\nValues(results *[]Params, exprs ...string) (int64, error)\n// query all data and map to [][]interface\n// it converts data to [][column_index]value\n// for example:\n//  var list []ParamsList\n//  qs.ValuesList(&list) // list[0][1] == "slene"\nValuesList(results *[]ParamsList, exprs ...string) (int64, error)\n// query all data and map to []interface.\n// it\'s designed for one column record set, auto change to []value, not [][column]value.\n// for example:\n//  var list ParamsList\n//  qs.ValuesFlat(&list, "UserName") // list[0] == "slene"\nValuesFlat(result *ParamsList, expr string) (int64, error)\n// query all rows into map[string]interface with specify key and value column name.\n// keyCol = "name", valueCol = "value"\n// table data\n// name  | value\n// total | 100\n// found | 200\n// to map[string]interface{}{\n//  "total": 100,\n//  "found": 200,\n// }\nRowsToMap(result *Params, keyCol, valueCol string) (int64, error)\n// query all rows into struct with specify key and value column name.\n// keyCol = "name", valueCol = "value"\n// table data\n// name  | value\n// total | 100\n// found | 200\n// to struct {\n//  Total int\n//  Found int\n// }\nRowsToStruct(ptrStruct interface{}, keyCol, valueCol string) (int64, error)\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u6bcf\u4e2a\u8fd4\u56de QuerySeter \u7684 api \u8c03\u7528\u65f6\u90fd\u4f1a\u65b0\u5efa\u4e00\u4e2a QuerySeter\uff0c\u4e0d\u5f71\u54cd\u4e4b\u524d\u521b\u5efa\u7684\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u9ad8\u7ea7\u67e5\u8be2\u4f7f\u7528 Filter \u548c Exclude \u6765\u505a\u5e38\u7528\u7684\u6761\u4ef6\u67e5\u8be2\u3002\u56ca\u62ec\u4e24\u79cd\u6e05\u6670\u7684\u8fc7\u6ee4\u89c4\u5219\uff1a\u5305\u542b\uff0c \u6392\u9664"))),(0,a.kt)("h3",{id:"filter"},"Filter"),(0,a.kt)("p",null,"\u7528\u6765\u8fc7\u6ee4\u67e5\u8be2\u7ed3\u679c\uff0c\u8d77\u5230 ",(0,a.kt)("strong",{parentName:"p"},"\u5305\u542b\u6761\u4ef6")," \u7684\u4f5c\u7528"),(0,a.kt)("p",null,"\u591a\u4e2a Filter \u4e4b\u95f4\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"AND")," \u8fde\u63a5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Filter("profile__isnull", true).Filter("name", "slene")\n// WHERE profile_id IS NULL AND name = \'slene\'\n')),(0,a.kt)("h3",{id:"exclude"},"Exclude"),(0,a.kt)("p",null,"\u7528\u6765\u8fc7\u6ee4\u67e5\u8be2\u7ed3\u679c\uff0c\u8d77\u5230 ",(0,a.kt)("strong",{parentName:"p"},"\u6392\u9664\u6761\u4ef6")," \u7684\u4f5c\u7528"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"NOT")," \u6392\u9664\u6761\u4ef6"),(0,a.kt)("p",null,"\u591a\u4e2a Exclude \u4e4b\u95f4\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"AND")," \u8fde\u63a5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.Exclude("profile__isnull", true).Filter("name", "slene")\n// WHERE NOT profile_id IS NULL AND name = \'slene\'\n')),(0,a.kt)("h3",{id:"setcond"},"SetCond"),(0,a.kt)("p",null,"\u81ea\u5b9a\u4e49\u6761\u4ef6\u8868\u8fbe\u5f0f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'cond := orm.NewCondition()\ncond1 := cond.And("profile__isnull", false).AndNot("status__in", 1).Or("profile__age__gt", 2000)\n\nqs := orm.QueryTable("user")\nqs = qs.SetCond(cond1)\n// WHERE ... AND ... AND NOT ... OR ...\n\ncond2 := cond.AndCond(cond1).OrCond(cond.And("name", "slene"))\nqs = qs.SetCond(cond2).Count()\n// WHERE (... AND ... AND NOT ... OR ...) OR ( ... )\n')),(0,a.kt)("h3",{id:"limit"},"Limit"),(0,a.kt)("p",null,"\u9650\u5236\u6700\u5927\u8fd4\u56de\u6570\u636e\u884c\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e ",(0,a.kt)("inlineCode",{parentName:"p"},"Offset")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"var DefaultRowsLimit = 1000 // ORM \u9ed8\u8ba4\u7684 limit \u503c\u4e3a 1000\n\n// \u9ed8\u8ba4\u60c5\u51b5\u4e0b select \u67e5\u8be2\u7684\u6700\u5927\u884c\u6570\u4e3a 1000\n// LIMIT 1000\n\nqs.Limit(10)\n// LIMIT 10\n\nqs.Limit(10, 20)\n// LIMIT 10 OFFSET 20 \u6ce8\u610f\u8ddf SQL \u53cd\u8fc7\u6765\u7684\n\nqs.Limit(-1)\n// no limit\n\nqs.Limit(-1, 100)\n// LIMIT 18446744073709551615 OFFSET 100\n// 18446744073709551615 \u662f 1<<64 - 1 \u7528\u6765\u6307\u5b9a\u65e0 limit \u9650\u5236 \u4f46\u6709 offset \u504f\u79fb\u7684\u60c5\u51b5\n")),(0,a.kt)("h3",{id:"offset"},"Offset"),(0,a.kt)("p",null,"\u8bbe\u7f6e \u504f\u79fb\u884c\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.Offset(20)\n// LIMIT 1000 OFFSET 20\n")),(0,a.kt)("h3",{id:"groupby"},"GroupBy"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.GroupBy("id", "age")\n// GROUP BY id,age\n')),(0,a.kt)("h3",{id:"orderby"},"OrderBy"),(0,a.kt)("p",null,"\u53c2\u6570\u4f7f\u7528 ",(0,a.kt)("strong",{parentName:"p"},"expr")),(0,a.kt)("p",null,"\u5728 expr \u524d\u4f7f\u7528\u51cf\u53f7 ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," \u8868\u793a ",(0,a.kt)("inlineCode",{parentName:"p"},"DESC")," \u7684\u6392\u5217"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'qs.OrderBy("id", "-profile__age")\n// ORDER BY id ASC, profile.age DESC\n\nqs.OrderBy("-profile__age", "profile")\n// ORDER BY profile.age DESC, profile_id ASC\n')),(0,a.kt)("h3",{id:"forceindex"},"ForceIndex"),(0,a.kt)("p",null,"\u5f3a\u8feb\u8d70\u7d22\u5f15\u3002\u4f7f\u7528\u8be5\u9009\u9009\u9879\u8bf7\u786e\u8ba4\u6570\u636e\u5e93\u652f\u6301\u8be5\u7279\u6027\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.ForceIndex(`idx_name1`,`idx_name2`)\n")),(0,a.kt)("h3",{id:"useindex"},"UseIndex"),(0,a.kt)("p",null,"\u4f7f\u7528\u7d22\u5f15\u3002\u4f7f\u7528\u8be5\u7279\u6027\u7684\u65f6\u5019\u9700\u8981\u786e\u8ba4\u6570\u636e\u5e93\u662f\u5426\u652f\u6301\u8be5\u7279\u6027\uff0c\u4ee5\u53ca\u8be5\u7279\u6027\u7684\u5177\u4f53\u542b\u4e49\u3002\u4f8b\u5982\uff0c\u90e8\u5206\u6570\u636e\u5e93\u5bf9\u4e8e\u8be5\u9009\u9879\u662f\u5f53\u6210\u4e00\u79cd\u5efa\u8bae\u6765\u6267\u884c\u7684\u3002"),(0,a.kt)("p",null,"\u5373\uff0c\u5373\u4fbf\u7528\u6237\u4f7f\u7528\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"UseIndex"),"\u65b9\u6cd5\uff0c\u4f46\u662f\u6570\u636e\u5e93\u5728\u5177\u4f53\u6267\u884c\u7684\u65f6\u5019\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u4f7f\u7528\u8bbe\u5b9a\u7684\u7d22\u5f15\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.UseIndex(`idx_name1`,`idx_name2`)\n")),(0,a.kt)("h3",{id:"ignoreindex"},"IgnoreIndex"),(0,a.kt)("p",null,"\u5ffd\u7565\u7d22\u5f15\u3002\u8bf7\u786e\u8ba4\u6570\u636e\u662f\u5426\u652f\u6301\u8be5\u9009\u9879\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.IgnoreIndex(`idx_name1`,`idx_name2`)\n")),(0,a.kt)("h3",{id:"distinct"},"Distinct"),(0,a.kt)("p",null,"\u5bf9\u5e94 sql \u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"distinct")," \u8bed\u53e5, \u8fd4\u56de\u6307\u5b9a\u5b57\u6bb5\u4e0d\u91cd\u590d\u7684\u503c."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"qs.Distinct()\n// SELECT DISTINCT\n")),(0,a.kt)("h3",{id:"relatedsel"},"RelatedSel"),(0,a.kt)("p",null,"\u5173\u7cfb\u67e5\u8be2\uff0c\u53c2\u6570\u4f7f\u7528 ",(0,a.kt)("strong",{parentName:"p"},"expr")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var DefaultRelsDepth = 5 // \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u76f4\u63a5\u8c03\u7528 RelatedSel \u5c06\u8fdb\u884c\u6700\u5927 5 \u5c42\u7684\u5173\u7cfb\u67e5\u8be2\n\nqs := o.QueryTable("post")\n\nqs.RelatedSel()\n// INNER JOIN user ... LEFT OUTER JOIN profile ...\n\nqs.RelatedSel("user")\n// INNER JOIN user ...\n// \u8bbe\u7f6e expr \u53ea\u5bf9\u8bbe\u7f6e\u7684\u5b57\u6bb5\u8fdb\u884c\u5173\u7cfb\u67e5\u8be2\n\n// \u5bf9\u8bbe\u7f6e null \u5c5e\u6027\u7684 Field \u5c06\u4f7f\u7528 LEFT OUTER JOIN\n')),(0,a.kt)("h3",{id:"count"},"Count"),(0,a.kt)("p",null,"\u4f9d\u636e\u5f53\u524d\u7684\u67e5\u8be2\u6761\u4ef6\uff0c\u8fd4\u56de\u7ed3\u679c\u884c\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'cnt, err := o.QueryTable("user").Count() // SELECT COUNT(*) FROM USER\nfmt.Printf("Count Num: %s, %s", cnt, err)\n')),(0,a.kt)("h3",{id:"exist"},"Exist"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'exist := o.QueryTable("user").Filter("UserName", "Name").Exist()\nfmt.Printf("Is Exist: %s", exist)\n')),(0,a.kt)("h3",{id:"update"},"Update"),(0,a.kt)("p",null,"\u4f9d\u636e\u5f53\u524d\u67e5\u8be2\u6761\u4ef6\uff0c\u8fdb\u884c\u6279\u91cf\u66f4\u65b0\u64cd\u4f5c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'num, err := o.QueryTable("user").Filter("name", "slene").Update(orm.Params{\n    "name": "astaxie",\n})\nfmt.Printf("Affected Num: %s, %s", num, err)\n// SET name = "astaixe" WHERE name = "slene"\n')),(0,a.kt)("p",null,"\u539f\u5b50\u64cd\u4f5c\u589e\u52a0\u5b57\u6bb5\u503c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// \u5047\u8bbe user struct \u91cc\u6709\u4e00\u4e2a nums int \u5b57\u6bb5\nnum, err := o.QueryTable("user").Update(orm.Params{\n    "nums": orm.ColValue(orm.ColAdd, 100),\n})\n// SET nums = nums + 100\n')),(0,a.kt)("p",null,"orm.ColValue \u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"ColAdd      // \u52a0\nColMinus    // \u51cf\nColMultiply // \u4e58\nColExcept   // \u9664\n")),(0,a.kt)("h3",{id:"delete"},"Delete"),(0,a.kt)("p",null,"\u4f9d\u636e\u5f53\u524d\u67e5\u8be2\u6761\u4ef6\uff0c\u8fdb\u884c\u6279\u91cf\u5220\u9664\u64cd\u4f5c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'num, err := o.QueryTable("user").Filter("name", "slene").Delete()\nfmt.Printf("Affected Num: %s, %s", num, err)\n// DELETE FROM user WHERE name = "slene"\n')),(0,a.kt)("h3",{id:"prepareinsert"},"PrepareInsert"),(0,a.kt)("p",null,"\u7528\u4e8e\u4e00\u6b21 prepare \u591a\u6b21 insert \u63d2\u5165\uff0c\u4ee5\u63d0\u9ad8\u6279\u91cf\u63d2\u5165\u7684\u901f\u5ea6\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var users []*User\n...\nqs := o.QueryTable("user")\ni, _ := qs.PrepareInsert()\nfor _, user := range users {\n    id, err := i.Insert(user)\n    if err == nil {\n        ...\n    }\n}\n// PREPARE INSERT INTO user (`name`, ...) VALUES (?, ...)\n// EXECUTE INSERT INTO user (`name`, ...) VALUES ("slene", ...)\n// EXECUTE ...\n// ...\ni.Close() // \u522b\u5fd8\u8bb0\u5173\u95ed statement\n')),(0,a.kt)("h3",{id:"all"},"All"),(0,a.kt)("p",null,"\u8fd4\u56de\u5bf9\u5e94\u7684\u7ed3\u679c\u96c6\u5bf9\u8c61"),(0,a.kt)("p",null,"All \u7684\u53c2\u6570\u652f\u6301 ",(0,a.kt)("em",{parentName:"p"},"[]Type \u548c "),"[]*Type \u4e24\u79cd\u5f62\u5f0f\u7684 slice"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var users []*User\nnum, err := o.QueryTable("user").Filter("name", "slene").All(&users)\nfmt.Printf("Returned Rows Num: %s, %s", num, err)\n')),(0,a.kt)("p",null,"All / Values / ValuesList / ValuesFlat \u53d7\u5230 ",(0,a.kt)("a",{parentName:"p",href:"#limit"},"Limit")," \u7684\u9650\u5236\uff0c\u9ed8\u8ba4\u6700\u5927\u884c\u6570\u4e3a 1000"),(0,a.kt)("p",null,"\u53ef\u4ee5\u6307\u5b9a\u8fd4\u56de\u7684\u5b57\u6bb5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type Post struct {\n    Id      int\n    Title   string\n    Content string\n    Status  int\n}\n\n// \u53ea\u8fd4\u56de Id \u548c Title\nvar posts []Post\no.QueryTable("post").Filter("Status", 1).All(&posts, "Id", "Title")\n')),(0,a.kt)("p",null,"\u5bf9\u8c61\u7684\u5176\u4ed6\u5b57\u6bb5\u503c\u5c06\u4f1a\u662f\u5bf9\u5e94\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c"),(0,a.kt)("h3",{id:"one"},"One"),(0,a.kt)("p",null,"\u5c1d\u8bd5\u8fd4\u56de\u5355\u6761\u8bb0\u5f55"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var user User\nerr := o.QueryTable("user").Filter("name", "slene").One(&user)\nif err == orm.ErrMultiRows {\n    // \u591a\u6761\u7684\u65f6\u5019\u62a5\u9519\n    fmt.Printf("Returned Multi Rows Not One")\n}\nif err == orm.ErrNoRows {\n    // \u6ca1\u6709\u627e\u5230\u8bb0\u5f55\n    fmt.Printf("Not row found")\n}\n')),(0,a.kt)("p",null,"\u53ef\u4ee5\u6307\u5b9a\u8fd4\u56de\u7684\u5b57\u6bb5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// \u53ea\u8fd4\u56de Id \u548c Title\nvar post Post\no.QueryTable("post").Filter("Content__istartswith", "prefix string").One(&post, "Id", "Title")\n')),(0,a.kt)("p",null,"\u5bf9\u8c61\u7684\u5176\u4ed6\u5b57\u6bb5\u503c\u5c06\u4f1a\u662f\u5bf9\u5e94\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c"),(0,a.kt)("h3",{id:"values"},"Values"),(0,a.kt)("p",null,"\u8fd4\u56de\u7ed3\u679c\u96c6\u7684 key => value \u503c"),(0,a.kt)("p",null,"key \u4e3aModel\u91cc\u7684Field name, value\u7684\u503c\u662finterface{}\u7c7b\u578b,\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u8981\u5c06value\u8d4b\u503c\u7ed9struct\u4e2d\u7684\u67d0\u5b57\u6bb5\uff0c\u9700\u8981\u6839\u636e\u7ed3\u6784\u4f53\u5bf9\u5e94\u5b57\u6bb5\u7c7b\u578b\u4f7f\u7528",(0,a.kt)("a",{parentName:"p",href:"https://golang.org/ref/spec#Type_assertions"},"\u65ad\u8a00"),"\u83b7\u53d6\u771f\u5b9e\u503c\u3002\u4e3e\u4f8b:",(0,a.kt)("inlineCode",{parentName:"p"},'Name : m["Name"].(string)')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var maps []orm.Params\nnum, err := o.QueryTable("user").Values(&maps)\nif err == nil {\n    fmt.Printf("Result Nums: %d\\n", num)\n    for _, m := range maps {\n        fmt.Println(m["Id"], m["Name"])\n    }\n}\n')),(0,a.kt)("p",null,"\u8fd4\u56de\u6307\u5b9a\u7684 Field \u6570\u636e"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"TODO"),": \u6682\u4e0d\u652f\u6301\u7ea7\u8054\u67e5\u8be2 ",(0,a.kt)("strong",{parentName:"p"},"RelatedSel")," \u76f4\u63a5\u8fd4\u56de Values"),(0,a.kt)("p",null,"\u4f46\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a expr \u7ea7\u8054\u8fd4\u56de\u9700\u8981\u7684\u6570\u636e"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var maps []orm.Params\nnum, err := o.QueryTable("user").Values(&maps, "id", "name", "profile", "profile__age")\nif err == nil {\n    fmt.Printf("Result Nums: %d\\n", num)\n    for _, m := range maps {\n        fmt.Println(m["Id"], m["Name"], m["Profile"], m["Profile__Age"])\n        // map \u4e2d\u7684\u6570\u636e\u90fd\u662f\u5c55\u5f00\u7684\uff0c\u6ca1\u6709\u590d\u6742\u7684\u5d4c\u5957\n    }\n}\n')),(0,a.kt)("h3",{id:"valueslist"},"ValuesList"),(0,a.kt)("p",null,"\u987e\u540d\u601d\u4e49\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u96c6\u4ee5slice\u5b58\u50a8"),(0,a.kt)("p",null,"\u7ed3\u679c\u7684\u6392\u5217\u4e0e Model \u4e2d\u5b9a\u4e49\u7684 Field \u987a\u5e8f\u4e00\u81f4"),(0,a.kt)("p",null,"\u8fd4\u56de\u7684\u6bcf\u4e2a\u5143\u7d20\u503c\u4ee5 string \u4fdd\u5b58"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var lists []orm.ParamsList\nnum, err := o.QueryTable("user").ValuesList(&lists)\nif err == nil {\n    fmt.Printf("Result Nums: %d\\n", num)\n    for _, row := range lists {\n        fmt.Println(row)\n    }\n}\n')),(0,a.kt)("p",null,"\u5f53\u7136\u4e5f\u53ef\u4ee5\u6307\u5b9a expr \u8fd4\u56de\u6307\u5b9a\u7684 Field"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var lists []orm.ParamsList\nnum, err := o.QueryTable("user").ValuesList(&lists, "name", "profile__age")\nif err == nil {\n    fmt.Printf("Result Nums: %d\\n", num)\n    for _, row := range lists {\n        fmt.Printf("Name: %s, Age: %s\\m", row[0], row[1])\n    }\n}\n')),(0,a.kt)("h3",{id:"valuesflat"},"ValuesFlat"),(0,a.kt)("p",null,"\u53ea\u8fd4\u56de\u7279\u5b9a\u7684 Field \u503c\uff0c\u5c06\u7ed3\u679c\u96c6\u5c55\u5f00\u5230\u5355\u4e2a slice \u91cc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var list orm.ParamsList\nnum, err := o.QueryTable("user").ValuesFlat(&list, "name")\nif err == nil {\n    fmt.Printf("Result Nums: %d\\n", num)\n    fmt.Printf("All User Names: %s", strings.Join(list, ", "))\n}\n')),(0,a.kt)("h2",{id:"\u5173\u7cfb\u67e5\u8be2"},"\u5173\u7cfb\u67e5\u8be2"),(0,a.kt)("p",null,"\u4ee5\u4f8b\u5b50\u91cc\u7684",(0,a.kt)("a",{parentName:"p",href:"/docs.mvc_model_orm"},"\u6a21\u578b\u5b9a\u4e49"),"\u6765\u770b\u4e0b\u600e\u4e48\u8fdb\u884c\u5173\u7cfb\u67e5\u8be2"),(0,a.kt)("h4",{id:"user-\u548c-profile-\u662f-onetoone-\u7684\u5173\u7cfb"},"User \u548c Profile \u662f OneToOne \u7684\u5173\u7cfb"),(0,a.kt)("p",null,"\u5df2\u7ecf\u53d6\u5f97\u4e86 User \u5bf9\u8c61\uff0c\u67e5\u8be2 Profile\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"user := &User{Id: 1}\no.Read(user)\nif user.Profile != nil {\n    o.Read(user.Profile)\n}\n")),(0,a.kt)("p",null,"\u76f4\u63a5\u5173\u8054\u67e5\u8be2\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'user := &User{}\no.QueryTable("user").Filter("Id", 1).RelatedSel().One(user)\n// \u81ea\u52a8\u67e5\u8be2\u5230 Profile\nfmt.Println(user.Profile)\n// \u56e0\u4e3a\u5728 Profile \u91cc\u5b9a\u4e49\u4e86\u53cd\u5411\u5173\u7cfb\u7684 User\uff0c\u6240\u4ee5 Profile \u91cc\u7684 User \u4e5f\u662f\u81ea\u52a8\u8d4b\u503c\u8fc7\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u53d6\u7528\u3002\nfmt.Println(user.Profile.User)\n\n// [SELECT T0.`id`, T0.`name`, T0.`profile_id`, T1.`id`, T1.`age` FROM `user` T0 INNER JOIN `profile` T1 ON T1.`id` = T0.`profile_id` WHERE T0.`id` = ? LIMIT 1000] - `1`\n')),(0,a.kt)("p",null,"\u901a\u8fc7 User \u53cd\u5411\u67e5\u8be2 Profile\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var profile Profile\nerr := o.QueryTable("profile").Filter("User__Id", 1).One(&profile)\nif err == nil {\n    fmt.Println(profile)\n}\n')),(0,a.kt)("h4",{id:"post-\u548c-user-\u662f-manytoone-\u5173\u7cfb\u4e5f\u5c31\u662f-foreignkey-\u4e3a-user"},"Post \u548c User \u662f ManyToOne \u5173\u7cfb\uff0c\u4e5f\u5c31\u662f ForeignKey \u4e3a User"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type Post struct {\n    Id    int\n    Title string\n    User  *User  `orm:"rel(fk)"`\n    Tags  []*Tag `orm:"rel(m2m)"`\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var posts []*Post\nnum, err := o.QueryTable("post").Filter("User", 1).RelatedSel().All(&posts)\nif err == nil {\n    fmt.Printf("%d posts read\\n", num)\n    for _, post := range posts {\n        fmt.Printf("Id: %d, UserName: %d, Title: %s\\n", post.Id, post.User.UserName, post.Title)\n    }\n}\n// [SELECT T0.`id`, T0.`title`, T0.`user_id`, T1.`id`, T1.`name`, T1.`profile_id`, T2.`id`, T2.`age` FROM `post` T0 INNER JOIN `user` T1 ON T1.`id` = T0.`user_id` INNER JOIN `profile` T2 ON T2.`id` = T1.`profile_id` WHERE T0.`user_id` = ? LIMIT 1000] - `1`\n')),(0,a.kt)("p",null,"\u6839\u636e Post.Title \u67e5\u8be2\u5bf9\u5e94\u7684 User\uff1a"),(0,a.kt)("p",null,"RegisterModel \u65f6\uff0cORM \u4e5f\u4f1a\u81ea\u52a8\u5efa\u7acb User \u4e2d Post \u7684\u53cd\u5411\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u67e5\u8be2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var user User\nerr := o.QueryTable("user").Filter("Post__Title", "The Title").Limit(1).One(&user)\nif err == nil {\n    fmt.Printf(user)\n}\n')),(0,a.kt)("h4",{id:"post-\u548c-tag-\u662f-manytomany-\u5173\u7cfb"},"Post \u548c Tag \u662f ManyToMany \u5173\u7cfb"),(0,a.kt)("p",null,"\u8bbe\u7f6e rel(m2m) \u4ee5\u540e\uff0cORM \u4f1a\u81ea\u52a8\u521b\u5efa\u4e2d\u95f4\u8868"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type Post struct {\n    Id    int\n    Title string\n    User  *User  `orm:"rel(fk)"`\n    Tags  []*Tag `orm:"rel(m2m)"`\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type Tag struct {\n    Id    int\n    Name  string\n    Posts []*Post `orm:"reverse(many)"`\n}\n')),(0,a.kt)("p",null,"\u4e00\u6761 Post \u7eaa\u5f55\u53ef\u80fd\u5bf9\u5e94\u4e0d\u540c\u7684 Tag \u7eaa\u5f55,\u4e00\u6761 Tag \u7eaa\u5f55\u53ef\u80fd\u5bf9\u5e94\u4e0d\u540c\u7684 Post \u7eaa\u5f55\uff0c\u6240\u4ee5 Post \u548c Tag \u5c5e\u4e8e\u591a\u5bf9\u591a\u5173\u7cfb,\u901a\u8fc7 tag name \u67e5\u8be2\u54ea\u4e9b post \u4f7f\u7528\u4e86\u8fd9\u4e2a tag"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var posts []*Post\nnum, err := dORM.QueryTable("post").Filter("Tags__Tag__Name", "golang").All(&posts)\n')),(0,a.kt)("p",null,"\u901a\u8fc7 post title \u67e5\u8be2\u8fd9\u4e2a post \u6709\u54ea\u4e9b tag"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var tags []*Tag\nnum, err := dORM.QueryTable("tag").Filter("Posts__Post__Title", "Introduce Beego ORM").All(&tags)\n')),(0,a.kt)("h2",{id:"\u8f7d\u5165\u5173\u7cfb\u5b57\u6bb5"},"\u8f7d\u5165\u5173\u7cfb\u5b57\u6bb5"),(0,a.kt)("p",null,"LoadRelated \u7528\u4e8e\u8f7d\u5165\u6a21\u578b\u7684\u5173\u7cfb\u5b57\u6bb5\uff0c\u5305\u62ec\u6240\u6709\u7684 rel/reverse - one/many \u5173\u7cfb"),(0,a.kt)("p",null,"ManyToMany \u5173\u7cfb\u5b57\u6bb5\u8f7d\u5165"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// \u8f7d\u5165\u76f8\u5e94\u7684 Tags\npost := Post{Id: 1}\nerr := o.Read(&post)\nnum, err := o.LoadRelated(&post, "Tags")\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// \u8f7d\u5165\u76f8\u5e94\u7684 Posts\ntag := Tag{Id: 1}\nerr := o.Read(&tag)\nnum, err := o.LoadRelated(&tag, "Posts")\n')),(0,a.kt)("p",null,"User \u662f Post \u7684 ForeignKey\uff0c\u5bf9\u5e94\u7684 ReverseMany \u5173\u7cfb\u5b57\u6bb5\u8f7d\u5165"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    Id    int\n    Name  string\n    Posts []*Post `orm:"reverse(many)"`\n}\n\nuser := User{Id: 1}\nerr := dORM.Read(&user)\nnum, err := dORM.LoadRelated(&user, "Posts")\nfor _, post := range user.Posts {\n    //...\n}\n')),(0,a.kt)("h2",{id:"\u591a\u5bf9\u591a\u5173\u7cfb\u64cd\u4f5c"},"\u591a\u5bf9\u591a\u5173\u7cfb\u64cd\u4f5c"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"type QueryM2Mer interface {",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#querym2mer-add"},"Add(...interface{}) (int64, error)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#querym2mer-remove"},"Remove(...interface{}) (int64, error)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#querym2mer-exist"},"Exist(interface{}) bool")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#querym2mer-clear"},"Clear() (int64, error)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#querym2mer-count"},"Count() (int64, error)")))),(0,a.kt)("li",{parentName:"ul"},"}")),(0,a.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a QueryM2Mer \u5bf9\u8c61"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'o := orm.NewOrm()\npost := Post{Id: 1}\nm2m := o.QueryM2M(&post, "Tags")\n// \u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5bf9\u8c61\uff0c\u4e3b\u952e\u5fc5\u987b\u6709\u503c\n// \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5bf9\u8c61\u9700\u8981\u64cd\u4f5c\u7684 M2M \u5b57\u6bb5\n// QueryM2Mer \u7684 api \u5c06\u4f5c\u7528\u4e8e Id \u4e3a 1 \u7684 Post\n')),(0,a.kt)("h3",{id:"querym2mer-add"},"QueryM2Mer Add"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'tag := &Tag{Name: "golang"}\no.Insert(tag)\n\nnum, err := m2m.Add(tag)\nif err == nil {\n    fmt.Println("Added nums: ", num)\n}\n')),(0,a.kt)("p",null,"Add \u652f\u6301\u591a\u79cd\u7c7b\u578b Tag ",(0,a.kt)("em",{parentName:"p"},"Tag []"),"Tag []Tag []interface{}"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var tags []*Tag\n...\n// \u8bfb\u53d6 tags \u4ee5\u540e\n...\nnum, err := m2m.Add(tags)\nif err == nil {\n    fmt.Println("Added nums: ", num)\n}\n// \u4e5f\u53ef\u4ee5\u591a\u4e2a\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\n// m2m.Add(tag1, tag2, tag3)\n')),(0,a.kt)("h3",{id:"querym2mer-remove"},"QueryM2Mer Remove"),(0,a.kt)("p",null,"\u4eceM2M\u5173\u7cfb\u4e2d\u5220\u9664 tag"),(0,a.kt)("p",null,"Remove \u652f\u6301\u591a\u79cd\u7c7b\u578b Tag ",(0,a.kt)("em",{parentName:"p"},"Tag []"),"Tag []Tag []interface{}"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var tags []*Tag\n...\n// \u8bfb\u53d6 tags \u4ee5\u540e\n...\nnum, err := m2m.Remove(tags)\nif err == nil {\n    fmt.Println("Removed nums: ", num)\n}\n// \u4e5f\u53ef\u4ee5\u591a\u4e2a\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\n// m2m.Remove(tag1, tag2, tag3)\n')),(0,a.kt)("h3",{id:"querym2mer-exist"},"QueryM2Mer Exist"),(0,a.kt)("p",null,"\u5224\u65ad Tag \u662f\u5426\u5b58\u5728\u4e8e M2M \u5173\u7cfb\u4e2d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'if m2m.Exist(&Tag{Id: 2}) {\n    fmt.Println("Tag Exist")\n}\n')),(0,a.kt)("h3",{id:"querym2mer-clear"},"QueryM2Mer Clear"),(0,a.kt)("p",null,"\u6e05\u9664\u6240\u6709 M2M \u5173\u7cfb"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'nums, err := m2m.Clear()\nif err == nil {\n    fmt.Println("Removed Tag Nums: ", nums)\n}\n')),(0,a.kt)("h3",{id:"querym2mer-count"},"QueryM2Mer Count"),(0,a.kt)("p",null,"\u8ba1\u7b97 Tag \u7684\u6570\u91cf"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'nums, err := m2m.Count()\nif err == nil {\n    fmt.Println("Total Nums: ", nums)\n}\n')))}g.isMDXComponent=!0}}]);