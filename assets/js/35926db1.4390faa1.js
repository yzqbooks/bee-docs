"use strict";(self.webpackChunkbee=self.webpackChunkbee||[]).push([[9384],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),i=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=i(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),c=i(r),d=a,k=c["".concat(o,".").concat(d)]||c[d]||p[d]||l;return r?n.createElement(k,s(s({ref:t},m),{},{components:r})):n.createElement(k,s({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,s=new Array(l);s[0]=c;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,s[1]=u;for(var i=2;i<l;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},4377:function(e,t,r){r.r(t),r.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return u},metadata:function(){return i},toc:function(){return p}});var n=r(7462),a=r(3366),l=(r(7294),r(3905)),s=["components"],u={name:"\u539f\u751f SQL \u67e5\u8be2",sort:5},o="\u4f7f\u7528SQL\u8bed\u53e5\u8fdb\u884c\u67e5\u8be2",i={unversionedId:"mvc/model/rawsql",id:"mvc/model/rawsql",title:"\u4f7f\u7528SQL\u8bed\u53e5\u8fdb\u884c\u67e5\u8be2",description:"* \u4f7f\u7528 Raw SQL \u67e5\u8be2\uff0c\u65e0\u9700\u4f7f\u7528 ORM \u8868\u5b9a\u4e49",source:"@site/docs/mvc/model/rawsql.md",sourceDirName:"mvc/model",slug:"/mvc/model/rawsql",permalink:"/bee-docs/docs/mvc/model/rawsql",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mvc/model/rawsql.md",tags:[],version:"current",frontMatter:{name:"\u539f\u751f SQL \u67e5\u8be2",sort:5},sidebar:"tutorialSidebar",previous:{title:"\u6784\u9020\u67e5\u8be2",permalink:"/bee-docs/docs/mvc/model/querybuilder"},next:{title:"ORM Test",permalink:"/bee-docs/docs/mvc/model/test"}},m={},p=[{value:"Exec",id:"exec",level:4},{value:"QueryRow",id:"queryrow",level:4},{value:"QueryRows",id:"queryrows",level:4},{value:"SetArgs",id:"setargs",level:4},{value:"Values / ValuesList / ValuesFlat",id:"values--valueslist--valuesflat",level:4},{value:"Values",id:"values",level:4},{value:"ValuesList",id:"valueslist",level:4},{value:"ValuesFlat",id:"valuesflat",level:4},{value:"RowsToMap",id:"rowstomap",level:4},{value:"RowsToStruct",id:"rowstostruct",level:4},{value:"Prepare",id:"prepare",level:4}],c={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u4f7f\u7528sql\u8bed\u53e5\u8fdb\u884c\u67e5\u8be2"},"\u4f7f\u7528SQL\u8bed\u53e5\u8fdb\u884c\u67e5\u8be2"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u4f7f\u7528 Raw SQL \u67e5\u8be2\uff0c\u65e0\u9700\u4f7f\u7528 ORM \u8868\u5b9a\u4e49"),(0,l.kt)("li",{parentName:"ul"},"\u591a\u6570\u636e\u5e93\uff0c\u90fd\u53ef\u76f4\u63a5\u4f7f\u7528\u5360\u4f4d\u7b26\u53f7 ",(0,l.kt)("inlineCode",{parentName:"li"},"?"),"\uff0c\u81ea\u52a8\u8f6c\u6362"),(0,l.kt)("li",{parentName:"ul"},"\u67e5\u8be2\u65f6\u7684\u53c2\u6570\uff0c\u652f\u6301\u4f7f\u7528 Model Struct \u548c Slice, Array")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'o := orm.NewOrm()\nids := []int{1, 2, 3}\nvar r RawSter\nr = o.Raw("SELECT name FROM user WHERE id IN (?, ?, ?)", ids)\n')),(0,l.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a ",(0,l.kt)("strong",{parentName:"p"},"RawSeter")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'o := orm.NewOrm()\nvar r RawSeter\nr = o.Raw("UPDATE user SET name = ? WHERE name = ?", "testing", "slene")\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'\n// RawSeter raw query seter\n// create From Ormer.Raw\n// for example:\n//  sql := fmt.Sprintf("SELECT %sid%s,%sname%s FROM %suser%s WHERE id = ?",Q,Q,Q,Q,Q,Q)\n//  rs := Ormer.Raw(sql, 1)\ntype RawSeter interface {\n    // execute sql and get result\n    Exec() (sql.Result, error)\n    // query data and map to container\n    // for example:\n    //  var name string\n    //  var id int\n    //  rs.QueryRow(&id,&name) // id==2 name=="slene"\n    QueryRow(containers ...interface{}) error\n\n    // query data rows and map to container\n    //  var ids []int\n    //  var names []int\n    //  query = fmt.Sprintf("SELECT \'id\',\'name\' FROM %suser%s", Q, Q)\n    //  num, err = dORM.Raw(query).QueryRows(&ids,&names) // ids=>{1,2},names=>{"nobody","slene"}\n    QueryRows(containers ...interface{}) (int64, error)\n    SetArgs(...interface{}) RawSeter\n    // query data to []map[string]interface\n    // see QuerySeter\'s Values\n    Values(container *[]Params, cols ...string) (int64, error)\n    // query data to [][]interface\n    // see QuerySeter\'s ValuesList\n    ValuesList(container *[]ParamsList, cols ...string) (int64, error)\n    // query data to []interface\n    // see QuerySeter\'s ValuesFlat\n    ValuesFlat(container *ParamsList, cols ...string) (int64, error)\n    // query all rows into map[string]interface with specify key and value column name.\n    // keyCol = "name", valueCol = "value"\n    // table data\n    // name  | value\n    // total | 100\n    // found | 200\n    // to map[string]interface{}{\n    //  "total": 100,\n    //  "found": 200,\n    // }\n    RowsToMap(result *Params, keyCol, valueCol string) (int64, error)\n    // query all rows into struct with specify key and value column name.\n    // keyCol = "name", valueCol = "value"\n    // table data\n    // name  | value\n    // total | 100\n    // found | 200\n    // to struct {\n    //  Total int\n    //  Found int\n    // }\n    RowsToStruct(ptrStruct interface{}, keyCol, valueCol string) (int64, error)\n\n    // return prepared raw statement for used in times.\n    // for example:\n    //  pre, err := dORM.Raw("INSERT INTO tag (name) VALUES (?)").Prepare()\n    //  r, err := pre.Exec("name1") // INSERT INTO tag (name) VALUES (`name1`)\n    Prepare() (RawPreparer, error)\n}\n\n')),(0,l.kt)("h4",{id:"exec"},"Exec"),(0,l.kt)("p",null,"\u6267\u884c sql \u8bed\u53e5\uff0c\u8fd4\u56de ",(0,l.kt)("a",{parentName:"p",href:"http://gowalker.org/database/sql#Result"},"sql.Result")," \u5bf9\u8c61"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'res, err := o.Raw("UPDATE user SET name = ?", "your").Exec()\nif err == nil {\n    num, _ := res.RowsAffected()\n    fmt.Println("mysql row affected nums: ", num)\n}\n')),(0,l.kt)("h4",{id:"queryrow"},"QueryRow"),(0,l.kt)("p",null,"QueryRow \u548c QueryRows \u63d0\u4f9b\u9ad8\u7ea7 sql mapper \u529f\u80fd"),(0,l.kt)("p",null,"\u652f\u6301 struct"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    Id       int\n    UserName string\n}\n\nvar user User\nerr := o.Raw("SELECT id, user_name FROM user WHERE id = ?", 1).QueryRow(&user)\n')),(0,l.kt)("h4",{id:"queryrows"},"QueryRows"),(0,l.kt)("p",null,"QueryRows \u652f\u6301\u7684\u5bf9\u8c61\u8fd8\u6709 map \u89c4\u5219\u662f\u548c QueryRow \u4e00\u6837\u7684\uff0c\u4f46\u90fd\u662f slice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    Id       int\n    UserName string\n}\n\nvar users []User\nnum, err := o.Raw("SELECT id, user_name FROM user WHERE id = ?", 1).QueryRows(&users)\nif err == nil {\n    fmt.Println("user nums: ", num)\n}\n')),(0,l.kt)("h4",{id:"setargs"},"SetArgs"),(0,l.kt)("p",null,"\u6539\u53d8 Raw(sql, args...) \u4e2d\u7684 args \u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 RawSeter"),(0,l.kt)("p",null,"\u7528\u4e8e\u5355\u6761 sql \u8bed\u53e5\uff0c\u91cd\u590d\u5229\u7528\uff0c\u66ff\u6362\u53c2\u6570\u7136\u540e\u6267\u884c\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'res, err := r.SetArgs("arg1", "arg2").Exec()\nres, err := r.SetArgs("arg1", "arg2").Exec()\n...\n\n')),(0,l.kt)("h4",{id:"values--valueslist--valuesflat"},"Values / ValuesList / ValuesFlat"),(0,l.kt)("p",null,"Raw SQL \u67e5\u8be2\u83b7\u5f97\u7684\u7ed3\u679c\u96c6 Value \u4e3a ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," \u7c7b\u578b\uff0cNULL \u5b57\u6bb5\u7684\u503c\u4e3a\u7a7a ``"),(0,l.kt)("h4",{id:"values"},"Values"),(0,l.kt)("p",null,"\u8fd4\u56de\u7ed3\u679c\u96c6\u7684 key => value \u503c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'var maps []orm.Params\nnum, err := o.Raw("SELECT user_name FROM user WHERE status = ?", 1).Values(&maps)\nif err == nil && num > 0 {\n    fmt.Println(maps[0]["user_name"]) // slene\n}\n')),(0,l.kt)("h4",{id:"valueslist"},"ValuesList"),(0,l.kt)("p",null,"\u8fd4\u56de\u7ed3\u679c\u96c6 slice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'var lists []orm.ParamsList\nnum, err := o.Raw("SELECT user_name FROM user WHERE status = ?", 1).ValuesList(&lists)\nif err == nil && num > 0 {\n    fmt.Println(lists[0][0]) // slene\n}\n')),(0,l.kt)("h4",{id:"valuesflat"},"ValuesFlat"),(0,l.kt)("p",null,"\u8fd4\u56de\u5355\u4e00\u5b57\u6bb5\u7684\u5e73\u94fa slice \u6570\u636e"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'var list orm.ParamsList\nnum, err := o.Raw("SELECT id FROM user WHERE id < ?", 10).ValuesFlat(&list)\nif err == nil && num > 0 {\n    fmt.Println(list) // []{"1","2","3",...}\n}\n')),(0,l.kt)("h4",{id:"rowstomap"},"RowsToMap"),(0,l.kt)("p",null,"SQL \u67e5\u8be2\u7ed3\u679c\u662f\u8fd9\u6837"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"total"),(0,l.kt)("td",{parentName:"tr",align:null},"100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"found"),(0,l.kt)("td",{parentName:"tr",align:null},"200")))),(0,l.kt)("p",null,"\u67e5\u8be2\u7ed3\u679c\u5339\u914d\u5230 map \u91cc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'res := make(orm.Params)\nnums, err := o.Raw("SELECT name, value FROM options_table").RowsToMap(&res, "name", "value")\n// res is a map[string]interface{}{\n//  "total": 100,\n//  "found": 200,\n// }\n')),(0,l.kt)("h4",{id:"rowstostruct"},"RowsToStruct"),(0,l.kt)("p",null,"SQL \u67e5\u8be2\u7ed3\u679c\u662f\u8fd9\u6837"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"total"),(0,l.kt)("td",{parentName:"tr",align:null},"100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"found"),(0,l.kt)("td",{parentName:"tr",align:null},"200")))),(0,l.kt)("p",null,"\u67e5\u8be2\u7ed3\u679c\u5339\u914d\u5230 struct \u91cc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type Options struct {\n    Total int\n    Found int\n}\n\nres := new(Options)\nnums, err := o.Raw("SELECT name, value FROM options_table").RowsToStruct(res, "name", "value")\nfmt.Println(res.Total) // 100\nfmt.Println(res.Found) // 200\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u5339\u914d\u652f\u6301\u7684\u540d\u79f0\u8f6c\u6362\u4e3a snake -> camel, eg: SELECT user_name ... \u9700\u8981\u4f60\u7684 struct \u4e2d\u5b9a\u4e49\u6709 UserName")),(0,l.kt)("h4",{id:"prepare"},"Prepare"),(0,l.kt)("p",null,"\u7528\u4e8e\u4e00\u6b21 prepare \u591a\u6b21 exec\uff0c\u4ee5\u63d0\u9ad8\u6279\u91cf\u6267\u884c\u7684\u901f\u5ea6\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'p, err := o.Raw("UPDATE user SET name = ? WHERE name = ?").Prepare()\nres, err := p.Exec("testing", "slene")\nres, err  = p.Exec("testing", "astaxie")\n...\n...\np.Close() // \u522b\u5fd8\u8bb0\u5173\u95ed statement\n')))}d.isMDXComponent=!0}}]);